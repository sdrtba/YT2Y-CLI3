from cryptography.fernet import Fernet
from http.cookiejar import Cookie, CookieJar
import browser_cookie3
import os

COOKIES_FILE = "etc/cookies.sec"
KEY_FILE = "etc/encryption.key"

def clear_console() -> None:
    os.system('cls' if os.name == 'nt' else 'clear')

def generate_key() -> None:
    if not os.path.exists(KEY_FILE):
        key = Fernet.generate_key()
        with open(KEY_FILE, "wb") as key_file:
            key_file.write(key)

def load_key() -> bytes:
    with open(KEY_FILE, "rb") as key_file:
        return key_file.read()

def get_browser_cookies() -> CookieJar | None:
    browsers = {
        1: browser_cookie3.firefox,
        2: browser_cookie3.chrome,
        3: browser_cookie3.edge,
    }

    while True:
        try:
            browser_id = int(input('[1] firefox\n[2] chrome\n[3] edge\n[0] exit\nChoose your main browser: '))
            if browser_id < 0 or browser_id > 3:
                raise ValueError
            elif browser_id == 0:
                return None

            return browsers.get(browser_id)(domain_name='youtube.com')
        except ValueError:
            clear_console()
            print('\033[91mНекорректный ввод. Введите число от 0 до 3\033[0m')
        except browser_cookie3.BrowserCookieError:
            clear_console()
            print('\033[91mБраузер не найден\033[0m')
        except Exception as e:
            print(f'\033[91mОшибка: {e}\033[0m')

def save_cookies() -> None:
    generate_key()
    os.makedirs(os.path.dirname(COOKIES_FILE), exist_ok=True)

    cookies = get_browser_cookies()
    print(type(cookies))
    if cookies is None:
        print("Выход...")
        return

    try:
        with open(COOKIES_FILE, "wb") as f:
            lines = [
                "# Netscape HTTP Cookie File",
                "# This file is generated by yt-dlp. Do not edit."
            ]
            for cookie in cookies:
                lines.append(
                    f"{cookie.domain}\t"
                    f"TRUE\t"
                    f"{cookie.path}\t"
                    f"TRUE\t"
                    f"{cookie.expires}\t"
                    f"{cookie.name}\t"
                    f"{cookie.value}\n"
                )

            cipher = Fernet(load_key())
            encrypted_lines = [cipher.encrypt(line.encode()) for line in lines]

            for enc_line in encrypted_lines:
                f.write(enc_line + b"\n")
        print("\033[32mCookies зашифрованы и сохранены в cookies.txt\033[0m")
    except Exception as e:
        print(f'\033[91mОшибка при сохранении cookies: {e}\033[0m')

def load_cookies() -> CookieJar | None:
    if not os.path.exists(COOKIES_FILE):
        print("\033[91mФайл cookies не найден\033[0m")
        return

    try:
        cipher = Fernet(load_key())
        with open(COOKIES_FILE, "rb") as f:
            decrypted_lines = [cipher.decrypt(line.strip()).decode() for line in f.readlines()]

        cookie_jar = CookieJar()
        for line in decrypted_lines[2:]:
            parts = line.split('\t')
            if len(parts) == 7:
                cookie = Cookie(
                    version=0,
                    name=parts[5],
                    value=parts[6],
                    port=None,
                    port_specified=False,
                    domain=parts[0],
                    domain_specified=True,
                    domain_initial_dot=parts[1] == 'TRUE',
                    path=parts[2],
                    path_specified=True,
                    secure=parts[3] == 'TRUE',
                    expires=int(parts[4] if parts[4] != 'None' else 0),
                    discard=False,
                    comment=None,
                    comment_url=None,
                    rest={'HttpOnly': None},
                    rfc2109=False
                )
                cookie_jar.set_cookie(cookie)

        return cookie_jar
    except Exception as e:
        print(f"\033[91mОшибка расшифровки: {e}\033[0m")

def check_cookies() -> None:
    if not os.path.exists(COOKIES_FILE):
        print("\033[91mФайл cookies не найден\033[0m")
        save_cookies()

if __name__ == '__main__':
    save_cookies()
